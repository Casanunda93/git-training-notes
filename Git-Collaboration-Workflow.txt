Centralized Workflow: Everyone works on Main/Master i.e, the most basic workflow possible. 

The simplest collaborative workflow is to have everyone work on the main branch. 
It's straightforward and can work for tiny teams but it has quite a few shortcomings. 

So every collaborator clones the remote repo, adds and commits, pulls other commits, deals with merge conflicts.
This can be an issue if someone needs to commit broken code for discussion etc. 

The Problem: While it's nice and easy to only work on the master branch, this leads to some serious issues with teams - Lots of time spent resolving conflicts and merging code, especially as team size scales up - No one can work on anything without disturbing the main codebase, how do you try adding someting radically differnt? How do you experiment? - The only way to collab on a feature together with another teammate is to push incomplete code to main. Other teammates now have broken code. 

** NOT RECCOMENDED **


Feature Branch Workflow: Don't work on master silly goose!

Rather that working directly on master/main, all new development should be done on seperate branches:
- Treat master/main branch as the official project history
- Multiple teammates can collab on a single feature and share code back and forth without polluting the master/main branch
- master/main branch won't contain broken code (or at least it won't unless someone messes up)

So every collaborator clones the remote repo, creates a new branch, works on the branch, pushes the branch up to git hub. That way if another person needs to collab, they can pull down that branch, do some work, push it back to git hub. No one has to stash their work etc. Once all the work is done, the branch can be merged into main and pushed up. Branches tend to be feature oriented. 

Merging in feature branches

At some point the work on feature braches will need to be merged into the main/master branch! There are a couple of options for how to do this. 
1. Merge at will, without any sort of discussion with your teammates. JUST DO IT WHENEVER YOU WANT (Please no)
2. Send an email or chat message or something to your team to discuss if the changes should be merged in. (ehhhhhhhh, not great but ok)
3. Pull Requests! (The correct answer)


Pull Requests: a feature built in to products like Github & Bitbucket. THEY ARE NOT NATIVE TO GIT ITSELF. 
They allow developers to alert team-members to new work that needs to be reviewed.
They provide a mechanism to approve or reject the work on a given branch. 
They also help facilitate discussion and feedback on the specified commits. 
"I have this new stuff I want to merge in to main, what do you all think about it"



