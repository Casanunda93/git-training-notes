Centralized Workflow: Everyone works on Main/Master i.e, the most basic workflow possible. 

The simplest collaborative workflow is to have everyone work on the main branch. 
It's straightforward and can work for tiny teams but it has quite a few shortcomings. 

So every collaborator clones the remote repo, adds and commits, pulls other commits, deals with merge conflicts.
This can be an issue if someone needs to commit broken code for discussion etc. 

The Problem: While it's nice and easy to only work on the master branch, this leads to some serious issues with teams - Lots of time spent resolving conflicts and merging code, especially as team size scales up - No one can work on anything without disturbing the main codebase, how do you try adding someting radically differnt? How do you experiment? - The only way to collab on a feature together with another teammate is to push incomplete code to main. Other teammates now have broken code. 

** NOT RECCOMENDED **


Feature Branch Workflow: Don't work on master silly goose!

Rather that working directly on master/main, all new development should be done on seperate branches:
- Treat master/main branch as the official project history
- Multiple teammates can collab on a single feature and share code back and forth without polluting the master/main branch
- master/main branch won't contain broken code (or at least it won't unless someone messes up)

So every collaborator clones the remote repo, creates a new branch, works on the branch, pushes the branch up to git hub. That way if another person needs to collab, they can pull down that branch, do some work, push it back to git hub. No one has to stash their work etc. Once all the work is done, the branch can be merged into main and pushed up. Branches tend to be feature oriented. 

Merging in feature branches

At some point the work on feature braches will need to be merged into the main/master branch! There are a couple of options for how to do this. 
1. Merge at will, without any sort of discussion with your teammates. JUST DO IT WHENEVER YOU WANT (Please no)
2. Send an email or chat message or something to your team to discuss if the changes should be merged in. (ehhhhhhhh, not great but ok)
3. Pull Requests! (The correct answer)


Pull Requests: a feature built in to products like Github & Bitbucket. THEY ARE NOT NATIVE TO GIT ITSELF. 
They allow developers to alert team-members to new work that needs to be reviewed.
They provide a mechanism to approve or reject the work on a given branch. 
They also help facilitate discussion and feedback on the specified commits. 
"I have this new stuff I want to merge in to main, what do you all think about it"

The workflow:
1. Do some work locally on a feature branch
2. Push up the feature branch to Github
3. Open a pull request using the feature branch just pushed up to Github
4. Wait for the PR to be approved and merged. Start a discussion on the PR (This part depends on the team structure)
5. Other collaborators pull the newly merged main branch 

Not all PR's can be merged without conflict.
When this occurs, conflicts have to be resolved. 
Github will give you the option to to view command line instructions
This gives you the step by step terminal commands to view and fix the issue
Once issues are fixed, merged and committed locally, they can be pushed to github

Branch Protection Rules: Have to be manually configured, important to have main branch configured
Prevents merging without PRs. 


Fork and Clone Workflow: Different from previous examples. Instead of just one centralised GitHub repo, every developer has their own GitHub repo in addition to the "main" repo. Developers make changes and push to their own forks before making a pull request. It's very commonly used on large open-source projects where there may be thousands of contributors with only a couple maintainers. 

Forking: GitHub and similar tools allow us to create personal copies of other peoples' repos on our Github account. We call those copies a "fork" of the original. 
When we fork a repo, we're basically asking Github "Make me my own copy of this repo please"
As with pull requests, forking is not a Git feature. The ability to fork is implemented by Github. 
You can then clone the repo to a local machine, work on it, push it back to my fork and not hit any restriction. 
At that point you can then raise a pull request for the original repo

**NOTE: In order for your local repo to stay up to date with the original master project, you have to create a second remote linked to that repo for pulling the latest infor down, conventionally called "upstream"**

Summary of Steps:
1. Fork the project to Github account
2. Clone the fork to local machine
3. Add upstream remote to the original repo
4. Do some work locally
5. Push to origin (the fork repo)
6. Open a pull request for the original project

The Fork and clone workflow might seem complicated but it is extremely common for good reason. It allows a project maintainer to accept contributions from developers all around the world without having to ass them as actual owners of the main project repo or worry about giving them all permission to push to that repo. 

The correct workflow will always be situational. 


