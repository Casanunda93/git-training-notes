Tags are pointers that refer to particular points in Git history.
We can mark a particular moment in time with a tag.
Tags are most often used to mark version releases in projects. 

Think of tags as branch references that DO NOT CHANGE. 
Once a tag is created, it always refers to the same commit. 
It's just a label for a commit. 

There are two types of Git Tag: lightweight and annotated tags

Lightweight tags are just a name/label that points to a particular commit. 

Annotated tags store extra meta data including the author's name and email, the dtae and a tagging message (like a commit message)



Semantic Versioning

The semantic versioning spec outlines a standardized versioning system for software releases. 
It provides a consistent way for developers to give meaning to their software releases i.e. how big of a change is the release. 
Versions consist of three numbers separated by periods i.e. v2.4.1

This is the most typical use of Tags. 

Each number in the pattern signifies a different thing. 
The first number stands for a mahor release, the second a minor release, the third a patch release. 
So starting at the first public facing release: v1.0.0

Patch releases normally do not contain new features or significant change. 
They typically signify bug fixes and other changes that do not impact how the code is used: v1.0.1

Minor releases signify that new features or fuctionallity have been added, but the project is still backwards compatible.
No breaking changes. 
The new functionallity is optional and should not forces the users to rewrite their own code: v1.1.0

Major releases signify significant changes that are no longer backwards compatible. 
Features may be removed or changed substantially: v2.0.0



Viewing tags

git tag      (will list all tags in the current repo)

git tag -l "*beta*"    (we can search for tags that match a particular pattern by using git tag -l and then passing a wildcard pattern e.g. "*beta*" will print a list
                        of tags that include "beta" in the name - the * just means some characters before and after the word beta)


Checking out tags

git chackout <tag>     (To view the state of a repo at a particular tag, this puts us in detatched HEAD. If we wanted to work from this past tag, we could create a
                        branch from this point) 


Comparing Tags

git diff <tag1> <tag2>     (compares the repo at each tag, see git diff sheet)


Creating Tags

There are two types of Git tags we can use: lightweight and annotated.
Lightweight tags are just a name/label that points to a particular commit. (frowned upon)
Annotated tags store extra meta data including the author's name and email, the date and a tagging message (like a commit message)

git tag <tagename>       (creates a new lightweight tag, by default git will create the tag referring to the commit that HEAD is referencing) 

git tag -a <tagname>     (creates a new annotated tag. Git will then open your default text editor and prompt you for additional info. We can also use the -m option 
                            to pass a message directly and forgo the opening of the text editor, by default git will create the tag referring to the commit that HEAD is
                            referencing)

git show <tagname>       (Used to view the meta data of an annotated tag)



Tagging previous commits

git tag -a <tagname> <commit-hash>        (creates and annotated tag for a articular commit, not the default)



Forcing Tags

If you try and reuse a tag that is already associated with a commit, Git will get sad and throw a wobbler. 

git tag -f <tagname>         (Forces our tag through, essentially moves the tag from the old commit it was pointing at to the new one, in this case default HEAD)



