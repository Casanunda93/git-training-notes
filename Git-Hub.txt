Git Hub is a repo hosting website, the best known and most used place to store source code. Welcome to The Grid. 

CLONING

git clone <url>       (Git will retrieve all the files associated with the repo and will copy them to your local machine. It will also initialize a new repo on your
                        machine, giving you access to the full git history of the cloned project. Because of this it is vital to not be in a repo when you clone,
                        clone replaces git init in this circumstance. Anyone can clone any public repo, you do not need to be an owner or collaborator.)

**You do not need to have an account to clone, just the HTML link**

git clone works with any hosted repo, not just github based repos





HOW DO I GET MY CODE ON GITHUB???

Option 1: If you already have an existing repo locally that you want to get on github - 1) Create a new repo on GitHub, 2) Connect your local repo (add a remote), 3) Push up your changes

Option 2: If you haven't begun work on your local repo - 1) Create a new repo on Github, 2) Clone it down to your machine, 3) Do some work locally, 4) Push up your changes to GitHub



Option 1:

ADDING A REMOTE

Before we can push anything to GitHub, we need to tell Git about our remote repo on GitHub i.e. setting a destination to push to. 
in Git, we refer to these "destinations" as remotes. Each remote is simply a URL where a hosted repo lives. 


***IMPORTANT: When cloning or pushing our personal stuff etc we are using the SSH Key, so make sure you use the SSH link for the remote NOT Https***
Finding the SSH link for a repo: https://github.com/orgs/community/discussions/22394

git remote or git remote -v     (Allows you to view any existing remotes for your repo, -v stands for verbose which gives you more info)

git remote add <name> <URL>    (creates a named (typically "origin") remote for the URL of the GitHub repo)

git remote rename <old-name> <new-name>       (changes remote name)

git remote remove <name>      (removes remote)


PUSHING

Pushing is when we send work to GitHub (doesn't need to specifically be GitHub but you know what I mean). 

git push <remote> <branch>       (we need to specify the remote (named location, SSH URL) we want to push to AND the specific local branch we want to push to that
                                    remote, if the remote branch doesn't exist it is created and named the same as the local branch, you don't need to be on the branch
                                    to push it)

example: git push origin main 

While we often want to push a local branch up to a remote branch of the same name, we don't have to. 
Example: Say we have a local branch called pancake, and rather than pushing it to a remote branch also called pancake suppose we want to send it to a remote branch called waffle

git push origin pancake:waffle      (syntax: git push <remote> <local-branch>:<remote-branch>, not very common but useful to know, **usure if this will create a new
                                        branch named waffle if one doesn't already exist, worth testing**)

git push -u origin main      (-u allows us to set the "upstream" of the branch we're pushing. Think of this as a link connecting our local branch to a branch on 
                                github. Running git push -u origin main sets the upstream of the local main branch so that it tracks the main branch on the origin repo)

**Once the above command has been run, it allows us to run the following**

git push        (provided the upstream has been set, git push will do the same as git push origin main)


Option 2: Starting from Scratch

If you haven't begun work on your local repo, you can follow theses steps:
1) Create a brand new repo on Github
2) Clone it down to your machine
3) Do some work locally
4) Push up your changes to Github

This workflow is useful as it automatically configures the remote


